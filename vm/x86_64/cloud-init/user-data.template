#cloud-config

# Configure SSH key authentication
users:
  - name: debian
    ssh_authorized_keys:
      - SSH_KEY_PLACEHOLDER
    sudo: ALL=(ALL) NOPASSWD:ALL

# Disable password authentication for SSH
ssh_pwauth: false

# Network configuration
network:
  version: 2
  ethernets:
    enp0s2:
      dhcp4: true
      dhcp4-overrides:
        use-dns: true
        use-routes: true
      optional: true
      link-local: []

# Package management
package_update: true
package_upgrade: false
packages:
  # Essential packages for VM functionality
  - openssh-server
  - linux-image-amd64  # Install full kernel for 9p support
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  
  # Required build packages
  - gcc
  - make
  - git
  - cmake
  - openssl
  - libasan6  # AddressSanitizer library
  - libubsan1  # UndefinedBehaviorSanitizer library
  - build-essential
  
  # Optional development packages
  - python3
  - python3-pip
  - clang-format
  - gdb
  - valgrind
  - graphviz
  - dpkg-dev  # For Debian packaging
  - chrpath  # For RPATH stripping
  - genisoimage  # For VM cloud-init ISO creation
  
  # Development utilities
  - vim
  - htop
  - net-tools
  - iputils-ping
  - socat
  - strace
  - tcpdump

# Set hostname
hostname: space-captain-dev
manage_etc_hosts: true

# Create mount point and fix network wait
runcmd:
  - mkdir -p /workspace
  # Fix debian user UID/GID to match host user
  - |
    HOST_UID=HOST_UID_PLACEHOLDER
    HOST_GID=HOST_GID_PLACEHOLDER
    DEBIAN_UID=$(id -u debian)
    DEBIAN_GID=$(id -g debian)
    
    # Only fix if UIDs don't match
    if [ "$DEBIAN_UID" != "$HOST_UID" ] || [ "$DEBIAN_GID" != "$HOST_GID" ]; then
      # Stop any services running as debian
      systemctl stop 'user@'"$DEBIAN_UID".service || true
      pkill -u debian || true
      sleep 1
      
      # Change UID and GID
      groupmod -g "$HOST_GID" debian
      usermod -u "$HOST_UID" -g "$HOST_GID" debian
      
      # Fix ownership of home directory
      chown -R debian:debian /home/debian
    fi
  # Configure systemd-networkd-wait-online with a shorter timeout to prevent boot hangs
  - mkdir -p /etc/systemd/system/systemd-networkd-wait-online.service.d
  - |
    cat > /etc/systemd/system/systemd-networkd-wait-online.service.d/override.conf << 'EOF'
    [Service]
    ExecStart=
    ExecStart=/lib/systemd/systemd-networkd-wait-online --timeout=10
    EOF
  - systemctl daemon-reload
  - systemctl restart systemd-networkd
  - systemctl restart ssh
  - ss -tlnp | grep :22 || true
  # Set custom prompt for the user
  - |
    OS_ID=$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
    ARCH=$(uname -m)
    cat >> /home/debian/.profile << EOF
    
    # Custom prompt for Space Captain Dev VM
    PS1='\\[\\e[36;1;2m\\][${OS_ID}:${ARCH}]@\\W \\$ \\[\\e[0m\\]'
    export PS1
    
    # Start in workspace directory
    [ -d /workspace ] && cd /workspace
    EOF
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  # Ensure SSH directory and permissions are correct
  - |
    # Fix SSH permissions for debian user
    mkdir -p /home/debian/.ssh
    chmod 700 /home/debian/.ssh
    chown debian:debian /home/debian/.ssh
    if [ -f /home/debian/.ssh/authorized_keys ]; then
      chmod 600 /home/debian/.ssh/authorized_keys
      chown debian:debian /home/debian/.ssh/authorized_keys
    fi
  # Create script to handle kernel setup and workspace mounting
  - |
    cat > /usr/local/bin/setup-vm-kernel-and-mount.sh << 'EOSCRIPT'
    #!/bin/bash
    # Ensure we boot with full kernel that has 9p support
    if uname -r | grep -q cloud; then
      # Set GRUB to prefer full kernel
      mkdir -p /etc/default/grub.d/
      echo 'GRUB_DEFAULT="1>2"' > /etc/default/grub.d/50-prefer-full-kernel.cfg
      update-grub
      # Schedule a reboot in the background to switch to full kernel
      nohup bash -c 'sleep 10 && touch /var/lib/cloud/instance/sem/config_reboot_for_kernel && /sbin/reboot' > /dev/null 2>&1 &
    fi
    
    # Create systemd mount unit for workspace
    cat > /etc/systemd/system/workspace.mount << 'EOF'
    [Unit]
    Description=Mount workspace via 9p
    After=systemd-modules-load.service
    
    [Mount]
    What=workspace
    Where=/workspace
    Type=9p
    Options=trans=virtio,version=9p2000.L,rw,cache=loose,msize=512000
    
    [Install]
    WantedBy=local-fs.target
    EOF
    systemctl enable workspace.mount
    
    # Also create a service to ensure 9p modules are loaded
    cat > /etc/systemd/system/load-9p-modules.service << 'EOF'
    [Unit]
    Description=Load 9p kernel modules
    Before=workspace.mount
    ConditionPathExists=/lib/modules/%v/kernel/fs/9p/9p.ko
    
    [Service]
    Type=oneshot
    RemainAfterExit=yes
    ExecStart=/sbin/modprobe 9p
    ExecStart=/sbin/modprobe 9pnet
    ExecStart=/sbin/modprobe 9pnet_virtio
    
    [Install]
    WantedBy=sysinit.target
    EOF
    systemctl enable load-9p-modules.service
    EOSCRIPT
    chmod +x /usr/local/bin/setup-vm-kernel-and-mount.sh
  - /usr/local/bin/setup-vm-kernel-and-mount.sh
  # Fix debian user UID/GID to match host
  - |
    echo "Fixing debian user UID/GID to match host..."
    # Stop any processes running as debian user
    pkill -u debian || true
    # Change UID/GID
    usermod -u HOST_UID_PLACEHOLDER debian
    groupmod -g HOST_GID_PLACEHOLDER debian
    # Fix home directory ownership
    chown -R debian:debian /home/debian
    # Fix workspace ownership (if mounted)
    if [ -d /workspace ]; then
      chown -R debian:debian /workspace || true
    fi
    echo "UID/GID fix completed"

# Mount workspace via virtfs (disabled - cloud kernel doesn't have 9p modules)
# mounts:
#   - [ "workspace", "/workspace", "9p", "trans=virtio,version=9p2000.L,rw", "0", "0" ]

# Final message
final_message: "Space Captain Dev VM is ready! SSH as debian@<ip>"