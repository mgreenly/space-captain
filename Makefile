# ============================================================================
# Space Captain Makefile
# ============================================================================
# Traditional build system - each source file compiles to its own object file

# ============================================================================
# Configuration
# ============================================================================

# Compiler settings
CC = gcc
CFLAGS_COMMON = -D_DEFAULT_SOURCE -std=c18 -pedantic -Wall -Wextra -g -MMD -MP $(shell pkg-config --cflags mbedtls)
CFLAGS_DEBUG = $(CFLAGS_COMMON) -O0
CFLAGS_RELEASE = $(CFLAGS_COMMON) -O3
CFLAGS = $(CFLAGS_DEBUG)  # Default to debug
LDFLAGS = -lpthread -lmbedtls -lmbedx509 -lmbedcrypto

# Build settings
TAG ?= pre
HOME := $(shell echo $$HOME)
PREFIX ?= $(HOME)/.local

# Directory structure
SRC_DIR = src
TST_DIR = tests
OBJ_DIR = obj
BIN_DIR = bin
DAT_DIR = data

# ============================================================================
# File Definitions
# ============================================================================

# Source files (excluding main files)
COMMON_SRCS = $(SRC_DIR)/message.c $(SRC_DIR)/dtls.c $(SRC_DIR)/generic_queue.c $(SRC_DIR)/message_queue.c
COMMON_OBJS_DEBUG = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/debug/%.o,$(COMMON_SRCS))
COMMON_OBJS_RELEASE = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/release/%.o,$(COMMON_SRCS))

# Main source files
SERVER_MAIN = $(SRC_DIR)/server.c
CLIENT_MAIN = $(SRC_DIR)/client.c

# Object files for debug and release builds
SERVER_OBJ_DEBUG = $(OBJ_DIR)/debug/server.o
CLIENT_OBJ_DEBUG = $(OBJ_DIR)/debug/client.o
SERVER_OBJ_RELEASE = $(OBJ_DIR)/release/server.o
CLIENT_OBJ_RELEASE = $(OBJ_DIR)/release/client.o

# All objects needed for executables
SERVER_OBJS_DEBUG = $(SERVER_OBJ_DEBUG) $(OBJ_DIR)/debug/message.o $(OBJ_DIR)/debug/dtls.o
CLIENT_OBJS_DEBUG = $(CLIENT_OBJ_DEBUG)
SERVER_OBJS_RELEASE = $(SERVER_OBJ_RELEASE) $(OBJ_DIR)/release/message.o $(OBJ_DIR)/release/dtls.o
CLIENT_OBJS_RELEASE = $(CLIENT_OBJ_RELEASE)

# Test files
TEST_SRCS = $(wildcard $(TST_DIR)/*_tests.c)
TEST_BINS = $(patsubst $(TST_DIR)/%.c,$(BIN_DIR)/%,$(TEST_SRCS))
TEST_OBJS = $(patsubst $(TST_DIR)/%.c,$(OBJ_DIR)/%.o,$(TEST_SRCS))

# Unity test framework
UNITY_OBJ = $(OBJ_DIR)/unity.o

# Dependency files (generated by -MMD -MP)
DEPS = $(COMMON_OBJS_DEBUG:.o=.d) $(COMMON_OBJS_RELEASE:.o=.d) \
       $(SERVER_OBJ_DEBUG:.o=.d) $(CLIENT_OBJ_DEBUG:.o=.d) \
       $(SERVER_OBJ_RELEASE:.o=.d) $(CLIENT_OBJ_RELEASE:.o=.d) \
       $(TEST_OBJS:.o=.d) $(UNITY_OBJ:.o=.d)

# ============================================================================
# Primary Targets
# ============================================================================

# Default target - build debug versions
.PHONY: all
all: server client

# Build individual debug targets
.PHONY: server
server: $(BIN_DIR)/server

.PHONY: client
client: $(BIN_DIR)/client

# Build release versions
.PHONY: release
release:
	@$(MAKE) clean
	@$(MAKE) $(BIN_DIR)/server-release $(BIN_DIR)/client-release

# ============================================================================
# Build Rules - Debug
# ============================================================================

# Debug executables
$(BIN_DIR)/server: $(SERVER_OBJS_DEBUG) | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

$(BIN_DIR)/client: $(CLIENT_OBJS_DEBUG) | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

# Debug object files - generic rule
$(OBJ_DIR)/debug/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)/debug
	$(CC) $(CFLAGS_DEBUG) -I$(SRC_DIR) -c -o $@ $<

# ============================================================================
# Build Rules - Release
# ============================================================================

# Release executables (with versioning)
$(BIN_DIR)/server-release: $(SERVER_OBJS_RELEASE) | $(BIN_DIR)
	@VERSION=$$(cat .VERSION); \
	DATETIME=$$(date +%Y%m%dT%H%M%S%z); \
	FULL_VERSION="$$VERSION-$(TAG).$$DATETIME"; \
	$(CC) -o $(BIN_DIR)/server-$$FULL_VERSION $^ $(LDFLAGS); \
	ln -sf server-$$FULL_VERSION $@

$(BIN_DIR)/client-release: $(CLIENT_OBJS_RELEASE) | $(BIN_DIR)
	@VERSION=$$(cat .VERSION); \
	DATETIME=$$(date +%Y%m%dT%H%M%S%z); \
	FULL_VERSION="$$VERSION-$(TAG).$$DATETIME"; \
	$(CC) -o $(BIN_DIR)/client-$$FULL_VERSION $^ $(LDFLAGS); \
	ln -sf client-$$FULL_VERSION $@

# Release object files - generic rule
$(OBJ_DIR)/release/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)/release
	$(CC) $(CFLAGS_RELEASE) -I$(SRC_DIR) -c -o $@ $<

# ============================================================================
# Test Targets
# ============================================================================

.PHONY: tests
tests: $(TEST_BINS)

.PHONY: run-tests
run-tests: tests server client
	@for test in $(TEST_BINS); do \
		echo "Running $$test..."; \
		$$test || exit 1; \
	done

# Unity framework object
$(UNITY_OBJ): $(TST_DIR)/vendor/unity.c | $(OBJ_DIR)
	$(CC) $(CFLAGS_DEBUG) -c -o $@ $<

# Test executables with specific dependencies
$(BIN_DIR)/generic_queue_tests: $(OBJ_DIR)/generic_queue_tests.o $(UNITY_OBJ) $(OBJ_DIR)/debug/generic_queue.o | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

$(BIN_DIR)/message_tests: $(OBJ_DIR)/message_tests.o $(UNITY_OBJ) $(OBJ_DIR)/debug/message.o | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

$(BIN_DIR)/dtls_tests: $(OBJ_DIR)/dtls_tests.o $(UNITY_OBJ) $(OBJ_DIR)/debug/dtls.o | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

$(BIN_DIR)/server_tests: $(OBJ_DIR)/server_tests.o $(UNITY_OBJ) $(OBJ_DIR)/debug/dtls.o | $(BIN_DIR)
	$(CC) -o $@ $^ $(LDFLAGS)

# Test object files
$(OBJ_DIR)/%_tests.o: $(TST_DIR)/%_tests.c | $(OBJ_DIR)
	$(CC) $(CFLAGS_DEBUG) -I$(SRC_DIR) -c -o $@ $<

# ============================================================================
# Development Targets
# ============================================================================

# Run targets
.PHONY: run-server
run-server: server | $(DAT_DIR)
	$(BIN_DIR)/server

.PHONY: run-client
run-client: client
	$(BIN_DIR)/client

# Debug with GDB
.PHONY: debug-server
debug-server: server
	gdb $(BIN_DIR)/server

.PHONY: debug-client
debug-client: client
	gdb $(BIN_DIR)/client

# Code formatting
.PHONY: fmt
fmt:
	@find . -path ./node_modules -prune -o -path ./tests/vendor -prune -o \( -name "*.c" -o -name "*.h" \) -type f -print | while read file; do \
		echo "Formatting: $$file"; \
		clang-format -i "$$file"; \
	done

# Generate self-signed certificates for DTLS
.PHONY: certs
certs:
	@mkdir -p certs
	@openssl req -x509 -newkey rsa:4096 -keyout certs/server.key -out certs/server.crt -sha256 -days 365 -nodes -subj "/CN=localhost"
	@echo "Certificates generated in certs/"

# Update CLI tools
.PHONY: update-tools
update-tools:
	npm upgrade -g @google/gemini-cli
	npm upgrade -g @anthropic-ai/claude-code
	npm upgrade -g @openai/codex

# Install CLI tools
.PHONY: install-tools
install-tools:
	npm install -g @google/gemini-cli
	npm install -g @anthropic-ai/claude-code
	npm install -g @openai/codex

# Architecture diagram
# Regenerate when any source files change
SRC_FILES = $(wildcard $(SRC_DIR)/*.c $(SRC_DIR)/*.h)

.PHONY: dot
dot: docs/arch.png

docs/arch.png: arch.dot $(SRC_FILES)
	dot -Tpng $< -o $@

# ============================================================================
# Installation & Cleanup
# ============================================================================

.PHONY: install
install: release
	@echo "Installing Space Captain to $(PREFIX)/bin"
	@install -d $(PREFIX)/bin
	@SERVER_VERSIONED=$$(basename $$(readlink -f $(BIN_DIR)/server-release)) && \
	CLIENT_VERSIONED=$$(basename $$(readlink -f $(BIN_DIR)/client-release)) && \
	echo "Installing server: $$SERVER_VERSIONED" && \
	install -m 755 $(BIN_DIR)/$$SERVER_VERSIONED $(PREFIX)/bin/$$SERVER_VERSIONED && \
	echo "Installing client: $$CLIENT_VERSIONED" && \
	install -m 755 $(BIN_DIR)/$$CLIENT_VERSIONED $(PREFIX)/bin/$$CLIENT_VERSIONED && \
	echo "Creating symlinks..." && \
	ln -sf $$SERVER_VERSIONED $(PREFIX)/bin/space-captain-server && \
	ln -sf $$CLIENT_VERSIONED $(PREFIX)/bin/space-captain-client && \
	echo "Installation complete!"

.PHONY: clean
clean:
	rm -rf $(OBJ_DIR) $(BIN_DIR)

# ============================================================================
# Version Management
# ============================================================================

.PHONY: version
version:
	@VERSION=$$(cat .VERSION); \
	DATETIME=$$(date +%Y%m%dT%H%M%S%z); \
	echo "$$VERSION-$(TAG).$$DATETIME"

.PHONY: bump-patch
bump-patch:
	@VERSION=$$(cat .VERSION); \
	MAJOR=$$(echo $$VERSION | cut -d. -f1); \
	MINOR=$$(echo $$VERSION | cut -d. -f2); \
	PATCH=$$(echo $$VERSION | cut -d. -f3); \
	NEW_PATCH=$$(($$PATCH + 1)); \
	echo "$$MAJOR.$$MINOR.$$NEW_PATCH" > .VERSION; \
	echo "Version bumped to $$(cat .VERSION)"

.PHONY: bump-minor
bump-minor:
	@VERSION=$$(cat .VERSION); \
	MAJOR=$$(echo $$VERSION | cut -d. -f1); \
	MINOR=$$(echo $$VERSION | cut -d. -f2); \
	NEW_MINOR=$$(($$MINOR + 1)); \
	echo "$$MAJOR.$$NEW_MINOR.0" > .VERSION; \
	echo "Version bumped to $$(cat .VERSION)"

.PHONY: bump-major
bump-major:
	@VERSION=$$(cat .VERSION); \
	MAJOR=$$(echo $$VERSION | cut -d. -f1); \
	NEW_MAJOR=$$(($$MAJOR + 1)); \
	echo "$$NEW_MAJOR.0.0" > .VERSION; \
	echo "Version bumped to $$(cat .VERSION)"


# ============================================================================
# Help Target
# ============================================================================

.PHONY: help
help:
	@echo "Space Captain Makefile"
	@echo "===================="
	@echo ""
	@echo "Primary Targets:"
	@echo "  make                Build debug server and client (default)"
	@echo "  make server         Build debug server only"
	@echo "  make client         Build debug client only"
	@echo "  make release        Build release versions with versioning"
	@echo ""
	@echo "Testing:"
	@echo "  make tests          Build all test executables"
	@echo "  make run-tests      Build and run all tests"
	@echo ""
	@echo "Development:"
	@echo "  make run-server     Build and run debug server"
	@echo "  make run-client     Build and run debug client"
	@echo "  make debug-server   Debug server with GDB"
	@echo "  make debug-client   Debug client with GDB"
	@echo "  make fmt            Format all code with clang-format"
	@echo ""
	@echo "Maintenance:"
	@echo "  make clean          Remove all build artifacts"
	@echo "  make install        Install release versions to PREFIX"
	@echo "  make dot            Generate architecture diagram"
	@echo "  make install-tools  Install CLI tools (gemini, claude, codex)"
	@echo "  make update-tools   Update CLI tools to latest versions"
	@echo ""
	@echo "Version Management:"
	@echo "  make version        Display current version"
	@echo "  make bump-patch     Increment patch version (0.0.X)"
	@echo "  make bump-minor     Increment minor version (0.X.0)"
	@echo "  make bump-major     Increment major version (X.0.0)"
	@echo ""
	@echo "Environment Variables:"
	@echo "  TAG=<tag>           Set build tag (default: pre)"
	@echo "  PREFIX=<path>       Set installation prefix (default: ~/.local)"

# ============================================================================
# Directory Creation
# ============================================================================

$(BIN_DIR) $(DAT_DIR) $(OBJ_DIR)/debug $(OBJ_DIR)/release $(OBJ_DIR):
	mkdir -p $@

# ============================================================================
# Include Dependencies
# ============================================================================

# Include auto-generated dependency files
-include $(DEPS)
